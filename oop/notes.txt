OOP means object oriented programming and 
it is a programming style.

procedural : youre thinking on how to write the 
code from top to bottom by defining the variable and print them.

OOP: youre thinking in how to define into reusable components and
use it. (bottom up Approach).

THINKING IN OOP
everything on the world can be defined as an object .
start thinking and organise your code into smallercomponents
and real life objects.
stop thinking in procedural (variables and functions)
start thinking in objects

Class is a blueprint of an object.
class is a logical grouping of code with variables and functions
specific to that object.
    the main purpose of class is to organise your code into
    individual components.
identify how you can organise your code into objects.
example: Users,Data-base,Files,Post...etc.

then start grouping those into classes.
each class has variables and functions into related individual
objects

one class will hold many variabls and functions but it logically
represent that object.

classes help you to organise the variables and functions to
individual components

one class describe about one objects variables and functions.

ORGANIZE classes
first step is to identify classes in your program.

start defining the classes.

remember, classes are specifications are not real.

Variables inside the class are called as properties.

$name is a property of a class

Methods are the functions inside the class

properties help to define elements of a class, and Methods
helps to perform some action in that class.

Objects are used to access properties and Methodsof a class.
you need to create an object of a class and start accessing the
properties and call the methods of that class.
Objects are also called as Instance of a class.
you can create unlimited objects for a class.
each object properties are unique to that specific Instance of the class

the job of the user is to handle the user request and
the job of a database will be connecting to a database class

the users class can have two methods fetch users and delete users

no sql is jason is a way to create a fake back end sever


            The $this keyword
allows us to access properties and methods of same class, indicates instance of this class.
you dont have to declare $this keyword.
it always refer to the properties and methods of that class.
example: 
cannot access the property of the class without an object 
class Car {
    public $name:
    funtion printName(){
        echo $name .PHP_EOL;
    }
}
Access properties
Class Car{
    public $name="john smith";
    function printName(){
        echo $this->showName(). PHP_EOL;
    }
}
$c = new Car();
$c->printName();
you cannot access $this outside the class it has to be inside the class


                        CONSTRUCTOR
every class has magic methods whivh gets called automatically.(predifined)
Constructors are magic methods that gets loaded automatically when instance
of a class is created.

purpose of constructor is to initialize the properties of the class
you can chose to define the property of a constructor or ignore it
example
class Car {
    public
    function__construct(){
        $this->name="";//Initialize the properties
    }
}
__construct([mixed $args="[,$...]]):void
__construct() is called automatically when new instance is created and
 does not return any value. arguments are optional.

 DEFINE AND CALL CONSTRUCTOR
 
 PURPOSE OF A CONSTRUCTOR
 1-- Initialize the properties of class
 2-- Initialize Database Connection
 3-- Check if File Exists.
 4-- Open the File before using it in methods
 5-- Check for internet connection.
 6-- Check API is reachable before the Connection
 7-- Load a instance of a class.
 8-- Load mandatory properties to execute the methods in a class.

 Initialize THE properties WITH CONSTRUCTOR
 always use the getter setter method to change the properties not
  directly changing it from the instance

  DESTRUCTORS
Destructors are magic methods that gets loased automatically just before the
instance of a class is destroyed.

Purpose of it is to clean up activities.
Example: closing Database connection or Saving File.
you can chose to define Destructor method or ignore it as it is optional.

defining a Destructor
class Car {
    public $dbConnection;
    function__destructor(){
        mysqli_close($dbConnection);
    }
}
__destruct(void) :void
__destruct() is called automatically before instance is destroyed and 
it does not return any value. No arguments required.

DEFINE AND CALL A DESTRUCTOR
PURPOSE OF A DESTRUCTOR
1-- perform the cleanup activities
2-- close the database connection
3-- close the file connection.
4-- save the log file.
5-- write activity logs - end time.
6-- free up the resources.
7-- save the properties into a file.
8-- save the cache
9-- serialize the objects

HOW TO CHAIN METHODS AND PROPERTIES:

ACCESS MODIFIERS
access MODIFIERS helps to restrict the access of properties or methods.
3types (public, private and protected).
they help to hide the properties and methods accessed from the object.

PUBLIC ACCESS MODIFIERS:public keyword before properties and methods.

PRIVATE ACCESS MODIFIERS:private keyword before properties and methods.
private access MODIFIERS means it can be accessed only
inside and cannot be accessed from outside the class.
methods and properties has to be marked private to make it private methods and properties.
'PRIVATE' access modifiers can be applied only to class properties and methods.
modifiers are always placed in front.

INHERITANCE - REUSEAblILITY - EXTENDABILITY

PROTECTED ACCESS MODIFIERS
the PROTECTED ACCESS MODIFIERS means it can be accessed inside the
child and parent class only.
methods and properties marked as protected can be accessed from parent 
and its child class.
protected properties cannot be accessed from outside using objects.
protected still behave as private but only parent and child can access it.
modifiers are always placed in front like public and private.
PROTECTED ACCESS CONTROL MODIFIERS IN INHERITANCE.

OVERRIDING METHODS AND PROPERTIES:CHILD CLASS overrides parent,
overriding a method can be done by writing/re-writing
the same method in the child class;
USECASE:INHERITANCE with teacher class

    FINAL KEYWORD PREVENTS OVERRIDING FROM CHILD 
Class as final = prevents inheritance
Method as Final = prevents Method Overriding

INNTERFACE-FRAMEWORK
you cannot define methods in interface. All the methods in interface
 has to be just definitions.

interface are like FRAMEWORK or structure that every class must define it
when they implement the interface.

Any Class can implement one or many interface.

Class that implement interface has to define all the methods of interface
else it will give error.

HOW TO DECLARE AND IMPLEMENT INNTERFACE
Note on Interface:
Interfaces are like guideline or contract.
When you want to control how a class should be defined then you can define
some guideline using interface and ask all the implementation class to follow it.

A server can implement the code and give a interface to call that 
methods with the required parameters.

Think like WSDL OR YAML OR XSD are like definitions of how somthing is implemented.
XML ARE like Class.

ABSTRACT CLASSES AND METHODS:
Abstract are Class that we do not want to create an/any object

A class is called abstract when it has least one abstract methods inside it.

methods tht are decleared as abstract must be defined in the child class.

Abstract class are like interface but abstract class 
can have normal methods implementation.

Utility Class is a good example of Abstract Class.

Abstract class means you do not want to create instance of this class but its\
methods in child classes.

you want to enforce child to implement some methods before using this class methods.

Abstract Class are libraries class that you want to extend and use its libraries methods.

STATIC METHODS AND PROPERTIES
when you want to access class methods or properties, without an instance then 
they are marked as Static.
Method and properties are marked as static so that it can be access 
with class name directly.

(::) - Scope resolution Operator is used to access static methods and properties
with class name.
Example: Car::applyBreak();
STATIC keyword when applied to methods or properties make them 
accessible without instance

DEFINE AND ACCESS STATIC METHODS AND PROPERTIES.

USE CASE OF STATIC METHODS AND PROPERTIES:
Utility Class is a good example of static Class.
Defining Method and properties as static you can access them with class name
Instead of writing functions outside you can write static class and define 
functions inside it.
Most common use case of static methods and properties are library function and 
reusable code.

SELF KEYWORD

POLYMORPHISM 
Polymorphism is a concept in oop that means every parent suggest what
functionality to implement and sub classes choose to implement that
functionality differently.

POLY means many and MORPIC means form.
Polymorphism means many forms of same method.

Polymorphism is achieved by using the same names in different classes and 
derived from same parent.

DATA ENCAPSULATION
Data Encapsulation is an oop concept which means in the class you hide the
properties and make them access only via methods.

properties are marked as private and define public getProperty and seProperty
methods to access that properties.

Data Encapsulation is a design pattern or concept you can choose to implement
in your coding style

Getter and Setter methods are defined with standard naming conventions.

DATA ABSTRACTION


OVERRIDING:
its a concept in oop where child can override (rewrite) the parent methods
with the same name.
Parent class might just be defined basic and standard funtionality of that method.
child can override and rewire it.
PHP allows to use the same method of parent class in child class. 
when method is called child methods are called.

OVERRIDE is a oop concept which helps to rewrite same methods
inherited from the parent.

OVERLOADING
same class same function but different parameters.

MAGIC METHODS
they are default methods available for any class and invoked automatically 
depending on the triggers.

set and get method is called wen somthing is not accessible.
call method
toString method
debuginfo method

all magic methods must be declared as public.

TYPE HINTING

DEPENDENCY INJECTION

CLONING

SERIALIZE means to save and read the object and it does not expires
it gets deleted and recreated on specified duration

CACHE is basically rapper of serialization

IDENTITY OPERATOR IS CHECKING FOR THE SAME INSTANCE VARIABLE

COMPARISON OPERATOR IS CHECKING INSIDE THE PROPERTY.if they have property, 
what is the value of those properties.

ITERATING OBJECTS

TRIATS
.limitation: you cannot extend more than one class.
.multiple inheritance is not possible in php.7.
.to resolve this issue you can create class and use it into another class
without ectending it.
.you define your class as traits and include multiple inheritance.